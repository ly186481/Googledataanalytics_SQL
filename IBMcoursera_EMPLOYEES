DROP TABLE IF EXISTS HR.EMPLOYEES;
DROP TABLE IF EXISTS HR.JOB_HISTORY;
DROP TABLE IF EXISTS HR.JOBS;
DROP TABLE IF EXISTS HR.DEPARTMENTS;
DROP TABLE IF EXISTS HR.LOCATIONS;

CREATE SCHEMA HR;

CREATE TABLE HR.EMPLOYEES (
                          EMP_ID CHAR(9) NOT NULL,
                          F_NAME VARCHAR(15) NOT NULL,
                          L_NAME VARCHAR(15) NOT NULL,
                          SSN CHAR(9),
                          B_DATE DATE NULL,
                          SEX CHAR,
                          ADDRESS VARCHAR(30),
                          JOB_ID CHAR(9),
                          SALARY DECIMAL(10,2),
                          MANAGER_ID CHAR(9),
                          DEP_ID CHAR(9) NOT NULL,
                          PRIMARY KEY (EMP_ID)
                        );

CREATE TABLE HR.JOB_HISTORY (
                            EMPL_ID CHAR(9) NOT NULL,
                            START_DATE DATE,
                            JOBS_ID CHAR(9) NOT NULL,
                            DEPT_ID CHAR(9),
                            PRIMARY KEY (EMPL_ID,JOBS_ID)
                          );

CREATE TABLE HR.JOBS (
                    JOB_IDENT CHAR(9) NOT NULL,
                    JOB_TITLE VARCHAR(30) ,
                    MIN_SALARY DECIMAL(10,2),
                    MAX_SALARY DECIMAL(10,2),
                    PRIMARY KEY (JOB_IDENT)
                  );

CREATE TABLE HR.DEPARTMENTS (
                            DEPT_ID_DEP CHAR(9) NOT NULL,
                            DEP_NAME VARCHAR(15) ,
                            MANAGER_ID CHAR(9),
                            LOC_ID CHAR(9),
                            PRIMARY KEY (DEPT_ID_DEP)
                          );

CREATE TABLE HR.LOCATIONS (
                          LOCT_ID CHAR(9) NOT NULL,
                          DEP_ID_LOC CHAR(9) NOT NULL,
                          PRIMARY KEY (LOCT_ID,DEP_ID_LOC)
                        );

#EXERCISE 1 String Patterns
#Retrieve all employees whose address is Elgin,IL
SELECT *
FROM HR.employees
WHERE ADDRESS LIKE '%Elgin,IL%' ;

#Retrieve all employees who were born during the 1970s
SELECT *
FROM HR.employees
WHERE B_DATE LIKE '197%';

#Retrieve all employees in department 5 whose salary is between 60000 and 70000
SELECT *
FROM HR.employees
WHERE (SALARY BETWEEN 60000 AND 70000) AND DEP_ID = 5;

#EXERCISE 2 SORTING
#Retrieve a list of employees ordered by department ID
SELECT *
FROM HR.employees
ORDER BY DEP_ID;

#Retrieve a list of employees ordered in descending order by department ID and within 
#each department ordered alphabetically in descending order by last name
SELECT *
FROM HR.employees
ORDER BY DEP_ID desc, L_NAME DESC;

#(Optional)In SQL problem 2(Ex2,Pro2), use department name instead of department ID, Retrieve a list of 
#employees ordered by department name, and within each deparment ordered alphabetocally in descending order by last name
SELECT *
FROM HR.employees as E, HR.DEPARTMENTS AS D
WHERE E.DEP_ID = D.DEPT_ID_DEP
ORDER BY D.DEP_NAME, E.L_NAME DESC ;

#EXERCISE3 GROUPING
#For each department ID retrieve the number of employees in the department
SELECT DEP_ID, COUNT(*)
FROM HR.employees
GROUP BY DEP_ID;

#For each department ID retrieve the number of employees in the department,
#and the average employee salary in the department
SELECT DEP_ID, COUNT(*), AVG(SALARY)
FROM HR.EMPLOYEES
GROUP BY DEP_ID;

#Label the computed columns in the result set of SQL problem 2 (E3,P2) as
#NUM_EMPLOYEES and AVG_SALARY
SELECT DEP_ID, COUNT(*) AS NUM_EMPLOYEES, AVG(SALARY) AS AVG_SALARY
FROM HR.EMPLOYEES
GROUP BY DEP_ID;

#IN SQL problem3(E3P3), order the result set by Average Salary
SELECT DEP_ID, COUNT(*) AS NUM_EMPLOYEES, AVG(SALARY) AS AVG_SALARY
FROM HR.EMPLOYEES
GROUP BY DEP_ID
ORDER BY AVG_SALARY;

#IN SQL Problem4(E3Pro4), limit the result to departments with fewer than 4 employees
SELECT DEP_ID, COUNT(*) AS NUM_EMPLOYEES, AVG(SALARY) AS AVG_SALARY
FROM HR.EMPLOYEES
GROUP BY DEP_ID
HAVING COUNT(*) < 4
ORDER BY AVG_SALARY;

#Accesssing Multiple Tables with Sub-Queries
#Retrieve only the EMPLOYEES records that correspond to jobs in the JOBS table
SELECT*
FROM HR.JOBS;

SELECT*
FROM HR.EMPLOYEES
WHERE JOB_ID IN (SELECT JOB_IDENT FROM HR.JOBS);

#Retrieve only the list of employees whose JOB_TITLE is Jr.Designer.
SELECT *
FROM HR.EMPLOYEES
WHERE JOB_ID IN (SELECT JOB_IDENT FROM HR.JOBS WHERE JOB_TITLE = 'Jr. Designer');

#Retrieve JOB information and who earn more than $70,000.
SELECT JOB_TITLE, MIN_SALARY, MAX_SALARY, JOB_IDENT
FROM HR.JOBS
WHERE JOB_IDENT IN (SELECT JOB_ID FROM HR.EMPLOYEES WHERE SALARY > 70000);

#Retrieve JOB information and whose birth year is after 1976
SELECT JOB_TITLE, MIN_SALARY, MAX_SALARY, JOB_IDENT
FROM HR.JOBS
WHERE JOB_IDENT IN (SELECT JOB_ID FROM HR.EMPLOYEES WHERE YEAR(B_DATE)>1976 );

#Retrieve JOB information for female employees whose birth year is after 1976
SELECT JOB_TITLE, MIN_SALARY, MAX_SALARY, JOB_IDENT
FROM HR.JOBS
WHERE JOB_IDENT IN (SELECT JOB_ID FROM HR.EMPLOYEES WHERE YEAR(B_DATE) >1976 AND SEX = 'F');

#EXERCISE 2 : ACCESSING MULTIPLE TABLES WITH INPLICIT JOINS
#Perform an implicit catesian/cross join between EMPLOYEES and JOBS table
SELECT *
FROM HR.EMPLOYEES, HR.JOBS;

#Retrieve only the EMPLOYEES records that correspond to jobs in the JOBS table
SELECT *
FROM HR.EMPLOYEES, HR.JOBS
WHERE EMPLOYEES.JOB_ID = JOBS.JOB_IDENT;

#Redo the previous query, using shorter aliases for table names
SELECT *
FROM HR.EMPLOYEES E, HR.JOBS J
WHERE E.JOB_ID = J.JOB_IDENT;

#Redo the previous query, but retrieve inly the Employee ID, Employee Name and Job Title
SELECT EMP_ID, F_NAME, L_NAME, JOB_TITLE
FROM HR.EMPLOYEES E, HR.JOBS J
WHERE E.JOB_ID = J.JOB_IDENT;

#Redo the previous query, but specify the fully qualified columns names with aliases in the 
#SELECT clause
SELECT E.EMP_ID, E.F_NAME, E.L_NAME, J.JOB_TITLE
FROM HR.EMPLOYEES E, HR.JOBS J
WHERE E.JOB_ID = J.JOB_IDENT;

